<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[Asch开发日志 0x03 --- Asch相关算法]]></title>
    <url>%2F2018%2F05%2F15%2Fasch-related-algo%2F</url>
    <content type="text"><![CDATA[学习一下Asch的算法机制，也算是深入了解了。 Asch的共识算法在委托权益证明(DPOS, Delegated Proof of Stake)的基础上加入了拜占庭容错算法(PBFT, Practical Byzantine Fault Tolerance),从而保证区块链不分叉并且有较高的性能。 Asch 系统采用的共识机制是基于 DPOS 的，也是使用了委托人选举的制度，但是在算法的后半部分采用了一个优化后的 PBFT 算法变种，这个算法可以在 t &lt; n / 3 时，以O(n^2)消息复杂度，O(1)的时间复杂度使忠诚的节点达成一致，不会分叉，其中 t 表示拜占庭节点(即可能发生任意行为的节点，比如网络延迟、停机、恶意攻击等等)的个数，n 表示所有节点的个数。 委托人选举Asch 系统的委托人选举制度与 DPOS 是类似的，核心系统是由 101 个委托人节点组成，委托人是被社区选举的可信账户，得票最高的 101 个委托人负责生产区块。得票排名未进入前 101 名的账户被称为候选人，当他们将来获得足够多的选票并进入前 101 名后，将成为正式的委托人。 每个 Asch 用户都有权利投票给最多 101 位委托人，选票的权重是由用户持有的 XAS数量决定。 每一个选举周期产生 101 个区块，每一次投票和委托人排名的变化将体现在下一个周 期。每个区块产生的间隔时间是 10 秒，新创建的区块会被广播到网络中并添加到区块链中。每当新的区块被添加到区块链中，该区块之前的所有交易的确认次数加一，得到 6 个确认后，可以认为交易是安全的，如果数额较小的交易，可以允许更小的确认次数，相反，数额较大的交易可以通过增加确认数来保证安全性。 如果有少数委托人发生故障，比如被攻击或者宕机，就会错失区块，这会被记录在案，这将影响该节点的在线率，进而影响社区的投票。因此委托人的竞选是需要严肃对待的，委托人应当由有一定网站运营经验的人来做，委托人要保障自己节点的稳定性，并以此促进整个系统的安全和稳定。 拜占庭容错Asch 系统与 DPOS 的不同主要体现在算法的后半部分。 DPOS 采用的方法是，首先对当前 round 的委托人列表进行随机的排序(保证每一轮的委托人顺序不同，也无法预测下一轮委托人顺序)，然后通过 round-robin 的方式依次让每个委托人创建区块。这个算法的主要缺点是，如果某个委托人节点叛变了，他可能会广播多个不一致的区块，这些区块间可能包括双重支付交易，导致整个网络被分叉了。当然，如果只有一个委托人叛变的话，这个分叉很快就可以通过下一次最长链同步的方法来消除，但是随着叛变节点的增加，消除分叉的时间将越来越长，少量节点的联合叛变将严重影响系统的安全性，即使一个交易达到 6 次确认，也很可能是不安全的。 为了解决这个问题，我们引入了 PBFT(Pratical Byzantine Fault Tolerance)算法。PBFT 算法也是使用 round-robin 的方式选择委托人，但是选出委托人后并不立即创建区块，而是首先发起一个提议(propose)，这个提议的目的是确定下一次区块的 hash。当超过 2/3 的节点都赞成该提议时，才接受由提议人创建的的下一个区块，下一个区块的 hash 必须与当前 round 达成共识的区块 hash 一致。从本质上来说，PBFT 算法的加入解决了委托人权利滥用的问题，使得委托人的记账能力更为可控。 Asch 受托人与锻造Asch系统中每个账户都可以注册成为受托人(需要支付100XAS)。成为受托人以后可以接受任意持币人的投票，当得票率排名进入前101时，可以获得记账权(即生产区块的权利，相当于比特币中的矿工)，并获取一定的奖励。 生产区块的过程叫做锻造(forging)。锻造不像比特币挖矿那样需要很强的算力，普通电脑即可进行，验证记账权的算法综合了时间片验证、受托人随机排名、受托人签名以及pbft算法等，具体可以参考asch的共识协议 排名前101的受托人按照时间顺序轮流产生区块，区块间隔为10秒。当轮班受托人出现异常无法生产区块时，则延期到下一个10秒，由下一个受托人继续生产。 每101个区块为一个周期，每个周期的受托人锻造顺序随机变换，每个周期的最后一个区块产出的时候，会进行该周期的收益结算，同时刷新新的排名。 因为宕机、网络错误等原因无法生产区块的受托人无法获得该周期的收益，并且会降低生产率。生产率是衡量一个受托人稳定性的指标，生产率过低会影响得票率。正常生产区块的受托人则平分收益，收益包括区块奖励和交易费，排名和得票率的高低并不影响收益的多少，进入前101名的受托人收益率是相同的。 密钥对生成算法123a.The Asch system selected the entropy length of 128bit and converted it into 12 words conforming to the BIP39 standard, namely the master password. b.Perform SHA-256 hashing on the master password,and hash_seed is obtained. c.After the ed25519 Edwards curve signature algorithm is used to sign hash_seed, the key pair is generated, including the public key and private key. a. Asch 系统选择的熵长度为 128bit，将之转换成符合BIP39标准的12 个单词，即主密码。b. 以主密码的sha256哈希做种子，得到hash_seedc. 再通过ed25519爱德华兹曲线签名算法对hash_seed进行签名，得到生成密钥对，包括公钥和私钥。 阿希地址生成算法：a.Perform SHA-256 hashing on the public key buffer,get h1. b.Perform RIPEMD-160 hashing on the h1,get payload. c.Perform SHA-256 hashing on the payload,get checksum1. d.Perform SHA-256 hashing on the checksum1,get checksum2. e.Paylaod and checnksum2 join together,get seed. f.Take the first len(payload)+4 bytes of the seed,get addr. g.Convert the addr from a byte string into a base58 string using Base58Check encoding,get b1. h."A" and b1 join together,get final Asch address.This is the most commonly used Asch Address format. a.对公钥buffer进行1次sha256运算，得到h1。b.然后对h1进行r160运算得到paylaod。c.对payload进行sha256得到checksum1。d.对checksum1进行sha256得到checksum2。e.拼接 paylaod和checnksum2，得到seed。f.取seed的len(payload)+4，得到addr。g.对addr进行base58编码得到b1。h.“A”+b1即为生成的base58格式的阿希地址。 Asch 白皮书]]></content>
      <categories>
        <category>Asch DApp</category>
      </categories>
      <tags>
        <tag>asch</tag>
        <tag>dapp</tag>
        <tag>blockchain</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Asch开发日志 0x02 --- 青峰老大在CSDN上的开发教程]]></title>
    <url>%2F2018%2F05%2F15%2Fdapp-sqf-md%2F</url>
    <content type="text"><![CDATA[asch团队也是不容易啊，自己开发了平台不算，还得推广啊。生态现在没有建立起来，开发者能力不够，社区不够活跃，老大只能自己撸起袖子加油干，自己又开发了一个 Dapp开发教程四 Asch Dapp Dice Game 的Dapp，代码都是开源的，好好理解吧。 Dapp开发教程三 Asch Dapp Mini DAO Dapp开发教程四 Asch Dapp Dice Game Dapp开发教程 发布Dapp到线上]]></content>
      <categories>
        <category>Asch DApp</category>
      </categories>
      <tags>
        <tag>asch</tag>
        <tag>dapp</tag>
        <tag>blockchain</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Asch开发日志 0x01 --- Dapp教程（青峰老大出品）]]></title>
    <url>%2F2018%2F05%2F15%2Fasch-hello-world-deep-md%2F</url>
    <content type="text"><![CDATA[发行自己的数字资产这个全程按照 ASCH 发行资产文档 做的，难度不大，主要是对概念的理解吧。 建议是注册Dapp时候的创世账户来发行数字资产，这个数字资产必须先设置二级密码什么的，这个对于一般的asch开发者来说会设置就好了，其他的不做要求。（好像不能先创建二级密码在发行数字资产）遇到一个小bug， 注册好了发行商信息后，在注册数字货币的时候，网页整个黑了，我傻乎乎的等了三四分钟，还是没反应。后来在交流群里面，原来是网页兼容性问题。 解决方案一：打开chrome的控制台console使用设备进行设置； 解决方案二：调整屏幕分辨率； 解决方案三：不要使用GUI，直接调用API进行设置； 原因好像是：网页黑的是遮罩层，把中间的可视化区域，搞到上面去了。其实我对这个是没有理解的，这个属于什么领域呢？前端嘛，零基础啊，我还是乖乖的去看看js在chrome下的调试指南不指北 Chrome 开发工具指南，保教不会什么的吧。 关于如何开发一个Dapp在这里瞎BB了两天，实际上一行代码没敲，完全是利用asch的脚手架实现了一个Dapp，后面怎么办呢？ Dapp相关接口API假设目前有一个dapp，id为 97b12583fed2973da179a6484ef15155f49503bc7ce2d45a6574f8e8ab09ff86 涉及如下几个账户dapp注册账户：chalk flame jeans rebuild dutch stone abstract capital lucky pottery raven depend普通dapp账户： minor borrow display rebel depart core buzz right distance avocado immense push,已经进行过充值、发表了一篇文章以及相关评论、点赞、评论打赏等。 注册dapp123456789在dapps目录下：git clone https://github.com/AschPlatform/cctime.git./node_modules/asch-cli/bin/asch-cli registerdapp -f dapps/cctime/dapp.json -e "chalk flame jeans rebuild dutch stone abstract capital lucky pottery raven depend"// 返回结果为dappid97b12583fed2973da179a6484ef15155f49503bc7ce2d45a6574f8e8ab09ff86mv cctime 97b12583fed2973da179a6484ef15155f49503bc7ce2d45a6574f8e8ab09ff86重启aschd后，dapp即可使用。web地址：http://10.10.30.10:4096/dapps/97b12583fed2973da179a6484ef15155f49503bc7ce2d45a6574f8e8ab09ff86/，目前该dapp前端ui尚未完成，但可以自行填写参数调用apiapi也可以访问，举例：http://10.10.30.10:4096/api/dapps/97b12583fed2973da179a6484ef15155f49503bc7ce2d45a6574f8e8ab09ff86/blocks/height，可以查询dapp高度 充值100xas到dapp123 ./node_modules/asch-cli/bin/asch-cli deposit -e "minor borrow display rebel depart core buzz right distance avocado immense push" -d 97b12583fed2973da179a6484ef15155f49503bc7ce2d45a6574f8e8ab09ff86 -c XAS -a 10000000000// 返回结果为交易id36e1626d5ef30ca1c75a3b96cdf6489984d64336736278d429c2300fd10ff126 dapp内部转账1234在dapp内给A6H9rawJ7qvE2rKwQfdtBHdeYVehB8gFzC转1.0XASz资产./node_modules/asch-cli/bin/asch-cli dapptransaction -e "minor borrow display rebel depart core buzz right distance avocado immense push" -d 97b12583fed2973da179a6484ef15155f49503bc7ce2d45a6574f8e8ab09ff86 -t 3 -f 10000000 -a '["XAS","100000000","A6H9rawJ7qvE2rKwQfdtBHdeYVehB8gFzC"]'// 返回交易id90b85ff532c546ee18e54e0e5d0473fadfa421b29017abcea410245a17e89d35 查询dapp账户余额1234567891011curl -X GET 'http://10.10.30.10:4096/api/dapps/97b12583fed2973da179a6484ef15155f49503bc7ce2d45a6574f8e8ab09ff86/balances/A6H9rawJ7qvE2rKwQfdtBHdeYVehB8gFzC' &amp;&amp; echo// 返回结果&#123; "balances": [ &#123; "currency": "XAS", "balance": "100000000" &#125; ], "success": true&#125; 查询dapp高度123456curl -X GET 'http://10.10.30.10:4096/api/dapps/97b12583fed2973da179a6484ef15155f49503bc7ce2d45a6574f8e8ab09ff86/blocks/height' &amp;&amp; echo// 返回结果&#123; "height": 2, "success": true&#125; 发布文章123./node_modules/asch-cli/bin/asch-cli dapptransaction -e "minor borrow display rebel depart core buzz right distance avocado immense push" -d 97b12583fed2973da179a6484ef15155f49503bc7ce2d45a6574f8e8ab09ff86 -t 1000 -f 10000000 -a '["title-test","","hello world!","tag1,tag2"]'// 返回结果223c29dc490302b81109ecfd71c27edf16bcd182942c289a758256ec27d5cf7b 文章列表1234567891011121314151617181920212223curl -X GET 'http://10.10.30.10:4096/api/dapps/97b12583fed2973da179a6484ef15155f49503bc7ce2d45a6574f8e8ab09ff86/articles' &amp;&amp; echo// 返回结果&#123; "articles": [ &#123; "id": "1", "tid": "223c29dc490302b81109ecfd71c27edf16bcd182942c289a758256ec27d5cf7b", "authorId": "AFUH568CbGC2GPcE4gXHiZhxdYQYfziz2J", "timestamp": 33595702, "title": "title-test", "url": "", "text": "hello world!", "tags": "test1,test2,code", "votes": 0, "comments": 0, "t_timestamp": 33595702, "t_type": 1000, "t_height": 359, "score": 0 &#125; ], "success": true&#125; 文章详情1234567891011121314151617181920curl -X GET 'http://10.10.30.10:4096/api/dapps/97b12583fed2973da179a6484ef15155f49503bc7ce2d45a6574f8e8ab09ff86/articles/1' &amp;&amp; echo// 返回&#123; "article": &#123; "id": "1", //文章id，评论时的参数 "tid": "223c29dc490302b81109ecfd71c27edf16bcd182942c289a758256ec27d5cf7b", "authorId": "AFUH568CbGC2GPcE4gXHiZhxdYQYfziz2J", "timestamp": 33595702, "title": "title-test", "url": "", "text": "hello world!", "tags": "test1,test2,code", "votes": 1, //点赞数 "comments": 1, // 评论数 "t_timestamp": 33595702, "t_type": 1000, //合约id "t_height": 359 //dapp区块高度 &#125;, "success": true&#125; 评论1234文章列表结果中的对应id的文章"comments"会加1./node_modules/asch-cli/bin/asch-cli dapptransaction -e "minor borrow display rebel depart core buzz right distance avocado immense push" -d 97b12583fed2973da179a6484ef15155f49503bc7ce2d45a6574f8e8ab09ff86 -t 1001 -f 10000000 -a '["1","","content1"]'// 返回交易id674964e3bbb75d31785ff75d56df85f27b5f02a453c462df37e96fc272292898 获取文章评论列表1234567891011121314151617181920curl -X GET 'http://10.10.30.10:4096/api/dapps/97b12583fed2973da179a6484ef15155f49503bc7ce2d45a6574f8e8ab09ff86/articles/1/comments' &amp;&amp; echo// 返回结果&#123; "comments": [ &#123; "id": 1, //comment id,即cid，给评论打赏时会用 "tid": "674964e3bbb75d31785ff75d56df85f27b5f02a453c462df37e96fc272292898", "authorId": "AFUH568CbGC2GPcE4gXHiZhxdYQYfziz2J", "aid": 1, //文章id "pid": 0, "content": "content1", "rewards": 0, "t_timestamp": 33597194, "t_type": 1001, //合约id "t_height": 472 &#125; ], "count": 1, "success": true&#125; 给文章投票123./node_modules/asch-cli/bin/asch-cli dapptransaction -e "minor borrow display rebel depart core buzz right distance avocado immense push" -d 97b12583fed2973da179a6484ef15155f49503bc7ce2d45a6574f8e8ab09ff86 -t 1002 -f 10000000 -a '["1","100000"]' // 返回， 3f2a934829dd0301d4cf9e57772f76fa1e3c0b79eab07d59e5344078318ac71c 给评论打赏123./node_modules/asch-cli/bin/asch-cli dapptransaction -e "minor borrow display rebel depart core buzz right distance avocado immense push" -d 97b12583fed2973da179a6484ef15155f49503bc7ce2d45a6574f8e8ab09ff86 -t 1003 -f 10000000 -a '["1","100000000"]'// 返回,打赏1.0 xasa8ecd9b0f80204d4aa1a63e1c18a4b6f582c5f8adc4b6c862246e913be008e2d 参考 Dapp开发教程一 Asch Dapp Hello World Dapp开发教程二一 Asch Dapp Asset ASCH 发行资产文档 Asch DAPP核心开发流程解析 Chrome 开发工具指南]]></content>
      <categories>
        <category>Asch DApp</category>
      </categories>
      <tags>
        <tag>asch</tag>
        <tag>dapp</tag>
        <tag>blockchain</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Asch开发日志 0x00 --- 搭建 hello world开发环境]]></title>
    <url>%2F2018%2F05%2F14%2Fasch-hello-world%2F</url>
    <content type="text"><![CDATA[今天正式开始搭建asch平台下的Dapp，目标是做一个建易的点对点的chat room,不过说不定也会改变这个主意，毕竟开发能力有限，但我会尽我所能开发好玩有趣的应用，写下博客，督促自己坚持下去。 简单流程按照给出的参考教程，一步步的搭建asch的开发环境，这里不在重复安装教程( Asch),问题主要是出现在我自己搭建一个hello world的Dapp时候， &gt; mkdir asch-test-dapp &gt; cd asch-test-dapp &gt; asch-cli dapps -a ----------------------------------------------------- Dapp name &gt; Double-Helix Enter DApp description &gt; Wish the motherland as soon as possible Enter DApp tags &gt; DNA 0.01，asch, dapp Enter DApp link &gt; https://github.com/houruixiang/Double-Helix/Double-Helix.zip Enter DApp icon url &gt; http://p8hu3ca6r.bkt.clouddn.com/dna.jpg 1234567891011121314151617Enter public keys of dapp delegates [ &#123; address: 'AGGajXq29996WgPFTmX8CnAkr1xnTR1YmA', secret: 'obscure into term trip uncover chicken between city amount couch skirt owner', publicKey: '4421dec44945fe867c527b18cd72e89c15398301a2280b0a9916f2854bf660d3' &#125;, &#123; address: 'A9tStNz4aK52AzHTTZPQctPvYrj6ETDSY2', secret: 'water rebuild hospital over distance siege this cement long knife hair flock', publicKey: 'f9349bd2406b8fe5182ccde695525fabb683d275d2969ec42193e75518cc49d9' &#125;, &#123; address: 'A8xtzsqKMrg9Rz8z4n7aCupA5N5XQ8xtWP', secret: 'fruit dolphin equip fatal clever chicken bubble pair visit rare fiction pair', publicKey: '1ba142b41223546c370bca19f5901647bea1ce20c88f9bfeb7377d14fbfb7aff' &#125;, &#123; address: 'A7tXgk3ifaHtVCGkNCnSGFDYrbZoaUVKy9', secret: 'album side never submit negative rent priority rubber sting vacant license fog', publicKey: '72ded9c535b8754c6d3dd864168c314f9582c9e5b65cea376ba28ecea51aedbe' &#125;, &#123; address: 'ACDwUaNJGzP81ciX8DHwpogwuT1CA9vmsp', secret: 'power protect notice convince morning stove engine inmate joke stone pen paper', publicKey: 'a59aeefee795e6684428b429a835834a8bd5a85a3ab0a5495f21711afd2b034b' &#125; ] Enter master secret of your genesis account &gt; major orange chair orbit rice biology fame average rotate craft hole police Enter asset name, for example &gt; CHROMO 20481024512 8 以上这些都是没有什么困难，但是信息要保存好，丢了就惨了。需要说明以下，这个账户即使公钥与私钥生成的账户，这个跟所有的数字货币都是一样的概念，只有当你把这些人的账户信息配置到你的DAPP工程下的时候，他们才是委托人，就是这个概念，别的没有什么。12345678910&gt; asch-cli crypto -g[ &#123; address: 'AQHyfWSX7MNQtyBUHWxg7K28r8S2SvkcaN', secret: 'human bone dish tongue ship chronic segment poet universe share absorb excite', publicKey: '1cb1638349a9c6bf460b68bfc0878f5175082fb41a53ff884c4d7f1667030040' &#125; ]创世账户“ someone manual strong movie roof episode eight spatial brown soldier soup motor ”登陆（该账户中有初始发行的1亿xas token），然后给 AQHyfWSX7MNQtyBUHWxg7K28r8S2SvkcaN 地址转10000个xas 问题就处在这里，这个转账操作不是像 Dapp开发教程一 Asch Dapp Hello World介绍的那样是一个固定账户，而应该是一个你自己生成的账户，asch-cli crypto -g生成的secret可以作为主密钥直接登陆钱包，address是创世账户转账地址，然后就OK了。 &gt; asch-cli registerdapp -f dapp.json -e &quot;human bone dish tongue ship chronic segment poet universe share absorb excite&quot; 输出 id = 1543fba6d566ebcdfd5d485deb7653473c166ea5ae93de151ff9e1edd92410db 这个id非常重要，是以后访问DAPP的id,也是调试的界面，其中 查看生成所有的Dapp的信息 http://localhost:4096/api/dapps 查看指定id的Dapp的信息 http://localhost:4096/api/dapps/get?id=1543fba6d566ebcdfd5d485deb7653473c166ea5ae93de151ff9e1edd92410db 几个账户的意义创世账户: someone manual strong movie roof episode eight spatial brown soldier soup motor 这个是testnet作为测试使用的，里面有几亿个 xas。 genesis account: major orange chair orbit rice biology fame average rotate craft hole police 这个是我们创建Dapp时候的创世账户，具体什么意思怎么使用，我也不知道，我就简单的设置了也给账号，看以后吧。 dapp account: human bone dish tongue ship chronic segment poet universe share absorb excite 这个是转账的账号，这个账号里面可以看到我们创建的Dapp,嗯，大概就是这样子。 2018年5月15日13点09分这个是官方给出的标准流程 Asch DAPP核心开发流程解析 其中有这样一段落，我们来细究一下： 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960613.1 发行资产（UIA）发行自己的资产，请参考这个链接http://docs.asch.mobi/docs/asch_issue_assets.html。 这里我们在钱包页面生成一个新账户A，主密码为“almost journey future similar begin type write celery girl month forget breeze”，对应的地址是AAjoobuMcmkQ1gS8vTfBy3dQavBiH7sBCF，该账户将作为下面的cctime.XCT资产发行者、cctime DAPP的注册者以及给其它账户转账的发送者，创世账户给该地址转1000个xas。A账户去注册发行商cctime，然后注册一个资产XCT（上限100亿，精度8，描述为：cctime.org的token时讯币，其它用默认的），最后发行10亿的cctime.XCT。``` ``` bash 3.2 利用模板启动第一个DAPPAsch作为一个区块链开发平台，为开发者提供了一个安全且高性能的虚拟机（asch-sandbox）以及一系列的内部接口、框架等。其中的一个脚手架就是利用模板来生成自定义的DAPP，通过回答几个问题就可以完成DAPP框架代码的开发工作。 模板包含了启动一个dapp需要的最少数据3.2.1 生成DAPP元信息(创世块）// 生成5个受托人账号zhenxi@MiAir:~/Codes/github/AschPlatform/asch$ asch-cli crypto -g? Enter number of accounts to generate 5[ &#123; address: 'A9pDhjc7NuYMWYLxkgAgVmHE2NQ7diMcWX', secret: 'fit night someone unveil dwarf believe middle evidence puzzle hotel common choose', publicKey: 'afdf69f0da9ff333218f2cd10cb0a907c2e76788f752b799cb1dab3a9f03bf63' &#125;, &#123; address: 'A2jvQUNowLgP9hHMN3tSCAUkakuigGRytB', secret: 'lawsuit ride civil slice kitchen unfold unable lumber prevent suspect finger chunk', publicKey: '67d52a0265f9e5366660c8b384cee56d3f8b5737b2dd3c617d22df83b5ebef02' &#125;, &#123; address: 'A7JjHgx7ACCJ6AxypBn4Qt9NrGaY4JuZDF', secret: 'absurd sweet blast dinner battle zero ladder steak coral fork venture coffee', publicKey: '39c2322600a0c81ecfa97119ec8e2d5bfb73394914d92b54e961846a987e4e22' &#125;, &#123; address: 'AMu7kuP9TjywkUQQQgALid96So2VCve5QB', secret: 'topic ramp throw cloud moment jungle bar series task protect erupt answer', publicKey: '4740d2c16bf6c5a174eba1e0f859253a64851d30acbc9655b01394af82d3e325' &#125;, &#123; address: 'A9BzaJDkyzb9RVAFjsePMemSVXMDLiQpjJ', secret: 'shoot tired know dish rally kiwi snack patrol bunker ocean panel this', publicKey: 'b433c226645981477642491f77de7b8d63274aa51f932bbe1fe3f445a8aaecc9' &#125; ]Done // 根据模板和自定义参数生成自己的dapp框架，包含创世块、配置文件、数据和合约、接口、日志等目录cd dapps mkdir cctime &amp;&amp; cd cctimezhenxi@MiAir:~/Codes/github/AschPlatform/asch/dapps$ asch-cli dapps -aCopying template to the current directory ...? Enter DApp name cctime? Enter DApp description cctime.org? Enter DApp tags news? Choose DApp category News? Enter DApp link http://github/aschplatform/cctime.zip? Enter DApp icon url http://a.com/x.png? Enter public keys of dapp delegates - hex array, use ',' for separator afdf69f0da9ff333218f2cd10cb0a907c2e76788f752b799cb1dab3a9f03bf63,67d52a0265f9e5366660c8b384cee56d3f8b5737b2dd3c617d22df83b5ebef02,39c2322600a0c81ecfa97119ec8e2d5bfb73394914d92b54e961846a987e4e22,4740d2c16bf6c5a174eba1e0f859253a64851d30acbc9655b01394af82d3e325,b433c226645981477642491f77de7b8d63274aa51f932bbe1fe3f445a8aaecc9? How many delegates are needed to unlock asset of a dapp? 3DApp meta information is saved to ./dapp.json ...? Enter master secret of your genesis account [hidden] //这里输入的密码为：'almost journey future similar begin type write celery girl month forget breeze'? Do you want publish a inbuilt asset in this dapp? Yes? Enter asset name, for example: BTC, CNY, USD, MYASSET XCT? Enter asset total amount 100000000? Enter asset precision 8New genesis block is created at: ./genesis.json// 生成的文件如下zhenxi@MiAir:~/Codes/github/AschPlatform/asch/dapps/cctime$ lsconfig.json contract dapp.json genesis.json init.js interface model public 12343.2.2 注册DAPP到localnet上zhenxi@MiAir:~/Codes/github/AschPlatform/asch/dapps/cctime$ asch-cli registerdapp -f dapp.json -e "almost journey future similar begin type write celery girl month forget breeze"// 返回结果为dappId75d084dc91221b380e7a3c6b3b7467935572b4ebaa1e9a3db91e1239377c1fed 这样就非常清晰了。新账户A，主密码为“almost journey future similar begin type write celery girl month forget breeze”，对应的地址是AAjoobuMcmkQ1gS8vTfBy3dQavBiH7sBCF， 该账户将作为下面的cctime.XCT资产发行者、cctime DAPP的注册者以及给其它账户转账的发送者，创世账户给该地址转1000个xas。A账户去注册发行商cctime，然后注册一个资产XCT（上限100亿，精度8，描述为：cctime.org的token时讯币，其它用默认的），最后发行10亿的cctime.XCT。 当初就是对这段理解不够啊，说的非常详细了。在测试环境下testnet，账户A想要发行一个Dapp和数字资产，当然也理所应当的把Dapp注册到账户A下面，但是这个时候账户A没有阿希币XAS，那么asch的开发这在自己的创世区块 someone manual strong movie roof episode eight spatial brown soldier soup motor 下给了一个亿的xas，这个只要你在本地安装好asch的生产环境都可以访问到。因此，第一步才需要从创世区块下向账户A转出一定的xas,这样账户A就有了足够的xas发行代币了。我的天啊，我居然花费了两天才明白了asch团队的苦心，也是醉了。 其余的使用 asch-cli crypto -g 生成的账户都可以看成一般用户，可以用来转账的，注册Dapp时候填写的委托人也只是DPOS共识机制所要求的（3-101个委托人）。 至于发行资产，我现在的理解是，在注册Dapp时候发行的那个是Dapp内部的资产，之内在Dapp内部使用，但是我设置的好像是20481024512，超过了一亿，没有正确加载出来，我还是要在搞一下。 资产再探究Dapp的创世块中可以创建内置资产，但不是必须的，内置资产无法跨链转账，只能在链内使用。在主链发行的UIA（用户自定义资产）可以充值到任意dapp中，也可从dapp提现到主链，这是dapp内置资产和UIA最大的区别。“一链多币，一币多链”指的就是主链可以发行多个UIA，而每个UIA都可以充值到多个dapp中。 进一步开发调试使用浏览器打开http://localhost:4096/dapps/1543fba6d566ebcdfd5d485deb7653473c166ea5ae93de151ff9e1edd92410db/，可以访问默认的一个前端页面，该页面可以进行一些简单的接口测试 Asch Dapp开发教程一 Asch Dapp Hello World 新手搭环境与发布dapp教程 Asch DAPP核心开发流程解析]]></content>
      <categories>
        <category>Asch DApp</category>
      </categories>
      <tags>
        <tag>asch</tag>
        <tag>dapp</tag>
        <tag>blockchain</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[完善博客实用功能]]></title>
    <url>%2F2018%2F05%2F12%2FMarkdown%20improve%2F</url>
    <content type="text"><![CDATA[既然自己搭建了一个博客系统，就要有点样子的，进行个性化的设置，好在hexo next主题实现这些功能简直不要太容易，于是就跟风来一波，主要是是通过配置两个文件实现的：站点配置文件..\blog\_config.yml主题配置文件..\blog\themes\next\_config.yml 设置标签和分类添加标签第一次配置，输入命令： hexo new page tags 确认站点配置文件里有tag_dir: tags确认主题配置文件里有tags: /tags编辑站点的source/tags/index.md，添加以下代码 title: tags date: 2015-10-20 06:49:50 type: &quot;tags&quot; comments: false 添加分类第一次配置，输入命令： hexo new page categories 确认站点配置文件里有category_dir: categories确认主题配置文件里有categories: /categories编辑站点的source/categories/index.md，添加以下代码 title: categories date: 2015-10-20 06:49:50 type: &quot;categories&quot; comments: false 每当创建新的md文件时候，输入 hexo new newfile.md 然后在生成文件的开头添加12345678---title: title #文章標題date: 2016-06-01 23:47:44 #文章生成時間categories: "Hexo教程" #文章分類目錄 可以省略tags: #文章標籤 可以省略 - 标签1 - 标签2--- 设置about直接写就好了。 字数统计和时间统计在根目录下安装 hexo-wordcount,运行： npm install hexo-wordcount --save 然后在主题的配置文件_config.yml中，配置如下：123456# Post wordcount display settings# Dependencies: https://github.com/willin/hexo-wordcountpost_wordcount:item_text: truewordcount: truemin2read: true 在每篇文章末尾统一添加“本文结束”标记具体实现方法 hexo之next主题个性化配置详细教程 中的章节6。 站内搜索当文章多起来的时候，标签提供的作用已经很少了，只能简单索引，搜索却能精确查找，最简单的本地站内搜索。安装nodejs插件： npm install hexo-generator-searchdb --save 修改 站点配置 文件12345search: path: search.xml field: post format: html limit: 10000 修改 主题配置文件12local_search: enable: true 不过一个大bug是搜索的时候，直接弹出一个对话框，这个让人非常的不爽啊。 点击出现💗效果在网址 http://7u2ss1.com1.z0.glb.clouddn.com/love.js将里面的代码复制一下，新建 love.js 文件并且将代码复制进去，然后保存。将love.js文件放到路径/themes/next/source/js/src里面，然后打开\themes\next\layout\_layout.swig文件,在文件最末尾添加以下代码：12&lt;!-- 页面点击小红心 --&gt;&lt;script type="text/javascript" src="/js/src/love.js"&gt;&lt;/script&gt; 动态粒子背景这个现在非常流行，html5最新支持的canvas功能。修改配置文件 打开 /next/_config.yml 在里面添加如下码：(可以放在最后面)。 1234# background settings# add canvas-nest effect# see detail from https://github.com/hustcc/canvas-nest.jscanvas_nest: true 到此就结束了，运行 hexo clean，然后运行 hexo g -d,完成部署就可以了。 Gitment评论这个是个比较简单的过程，不需要 hexo next主题集成gitment评论系统 里面这么复杂的操作，只需要第一步和第二步就可以完成整个评论系统了。需要特别注意的是不要使用中文命名md文件啊，不然会显示“初始化页面失败的”，这个真的是血的教训啊。 参考文献 hexo 搜索功能 hexo之next主题个性化配置详细教程 hexo next主题集成gitment评论系统 hexo+github教程之三：hexo next主题配置]]></content>
      <categories>
        <category>实用技术</category>
      </categories>
      <tags>
        <tag>博客</tag>
        <tag>个性化配置</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Markdown 简易入门教程]]></title>
    <url>%2F2018%2F05%2F10%2FMarkdown%2F</url>
    <content type="text"><![CDATA[闲得发慌，抽出时间学习以下 Markdown 这门标记语言，于是就有了这篇文章了。 编辑器直接使用 Visual Studio Code 就可以愉快的一边码字，一边预览效果了，简直不要太开心。 Markdown 属于标记性语言,语法超级简单，入手超快。 Markdown 语法手册标题一般来说，四级标题足够文档的使用，这个可以通过简单的 # 实现，别的方法就不介绍了。 1234# 一级标题## 二级标题### 三级标题#### 四级标题 粗体斜体粗体: **粗体** 斜体: *斜体* 粗体: 粗体斜体: 斜体 段落和换行 第一种： 直接回车键，只能段落间只能有一个空行123这是第一段这是第二段 这是第一段 这是第二段 第二种方法：使用 \ 控制空行数目1这是第一段 &lt;br /&gt; &lt;br /&gt; &lt;br /&gt;这是第二段 这是第一段 这是第二段 分割线可以在一行中用三个及以上的星号、减号、底线来建立分隔线，行内不能有除空格外的其他东西。 --- *** ___ 文字引用使用&gt;表示文字引用,但是我这个不知道为什么不使用&gt;也可以。12&gt;"野火烧不尽，春风吹又生。""野火烧不尽，春风吹又生。" “野火烧不尽，春风吹又生。”“野火烧不尽，春风吹又生。” 代码行内代码这个是一个行内的`代码` 这个是一个行内的代码 代码块使用四个缩进的空格代表代码块。 # 这是一个代码块，左边有四个空格。 int main(void){ prinf(&quot;hello world.\n&quot;); } 列表无序列表使用 *, +, -表示无序列表。 * 无序列表1 + 无序列表2 - 无序列表3 无序列表1 无序列表2 无序列表3 有序列表使用数字和点表示有序列表。 1. 有序列表1 2. 有序列表2 3. 有序列表3 有序列表1 有序列表2 有序列表3 链接网址链接网址链接有两种形式：行内式、参考式。不管是哪一种形式，链接文字都是使用[方括号]来标记的。 行内式1[Ruihou Blog](https://github.com/houruixiang/ruihou.github.io) Ruihou Blog 参考式 123456这里是[Google][1]; 这个是[百度][2]; 这个是[必应][]，再来一个[谷歌][]。非常好玩的一种实现方法。[1]: https://www.google.com/[2]: https://www.baidu.com/[必应]: https://www.bing.com/[谷歌]: https://www.google.com/ 这里是Google; 这个是百度; 这个是必应，再来一个谷歌。非常好玩的一种实现方法。 图片链接图片链接与上面的网址链接类似，同样有两种形式：行内式和参考式，只不过图片链接在前面加上一个感叹号!，在此不做累述。 行列式 ![序列图](http://p8hu3ca6r.bkt.clouddn.com/%E6%B5%81%E7%A8%8B%E5%9B%BE.JPG) ![流程图](http://p8hu3ca6r.bkt.clouddn.com/%E5%BA%8F%E5%88%97%E5%9B%BE.JPG) 参考式 ![谷歌][1] [1]: https://www.google.com/images/branding/googlelogo/2x/googlelogo_color_120x44dp.png &quot;Google&quot; Markdown 进阶语法标签 tags: [Markdown,语言]categories: [技术] 目录这个超级简单好用，简直不要太开心了。一句 [TOC] 就可以搞定了。[TOC]遗憾的是，这个hexo也不支持， VS Code是可以正确支持的。 表格表格的话我建议使用最简便的方式，不要太复杂的表格，高级的表格有更加专业的工具。 12345|long_long_id|long_long_name|long_long_score|| --- | :---: | ---: || 001 | Mark | 90 || 002 | Ford | 80 || 003 | Alan | 95 | 还有就是对齐了，用:对齐，:写在在—的左边就是左对齐，右边就是右对齐，两边都写就是居中。 long_long_id long_long_name long_long_score 001 Mark 90 002 Ford 80 003 Alan 95 脚注看样子跟网址引用很像的啊。 这是脚注一 [^1] 这是脚注二 [^2] 这是脚注三 [^3] [^1]: 脚注一 [^2]: 脚注二 [^3]: 脚注三 这是脚注一[^1]这是脚注二[^2]这是脚注三[^3][^1]: 脚注一[^2]: 脚注二[^3]: 脚注三 非常遗憾，这个居然也是显示不出来啊。 序列图这个在我的VS Code上面是可以正常显示的，但是在guthub pages上面就不可以显示，这个我也是没有办法了，所以最好的办法就是当成图片引用就好了，本身也不建议使用markdown代码来画图。 123Alice-&gt;Bob: Hello Bob, how are you?Note right of Bob: Bob thinksBob--&gt;Alice: I am good thanks! 123Alice-&gt;Bob: Hello Bob, how are you?Note right of Bob: Bob thinksBob--&gt;Alice: I am good thanks! 流程图这个在我的VS Code上面是可以正常显示的，但是在guthub pages上面就不可以显示，这个我也是没有办法了，所以最好的办法就是当成图片引用就好了，本身也不建议使用markdown代码来画图。 123456789st=&gt;start: Starte=&gt;end: Endop1=&gt;operation: My Operationsub1=&gt;subroutine: My Subroutinecond=&gt;condition: Yes or No?io=&gt;inputoutput: catch something...st-&gt;op1-&gt;condcond(yes)-&gt;io-&gt;econd(no)-&gt;sub1(right)-&gt;op1 123456789st=&gt;start: Starte=&gt;end: Endop1=&gt;operation: My Operationsub1=&gt;subroutine: My Subroutinecond=&gt;condition: Yes or No?io=&gt;inputoutput: catch something...st-&gt;op1-&gt;condcond(yes)-&gt;io-&gt;econd(no)-&gt;sub1(right)-&gt;op1]]></content>
      <categories>
        <category>实用技术</category>
      </categories>
      <tags>
        <tag>Markdown</tag>
        <tag>文档编辑</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[个人博客第一篇]]></title>
    <url>%2F2018%2F05%2F09%2Fname%2F</url>
    <content type="text"><![CDATA[主要是为了学习使用，这个博客的内容不限于技术，也包括自己日常吐槽，我想坚持下去，能够对自己的生活，工作，学习等不断的记录，改变自己的生活，希望可以帮助一些人。]]></content>
      <categories>
        <category>扯淡</category>
      </categories>
      <tags>
        <tag>入门</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Hello World]]></title>
    <url>%2F2018%2F05%2F09%2Fhello-world%2F</url>
    <content type="text"><![CDATA[Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new "My New Post" More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment]]></content>
      <categories>
        <category>hello world</category>
      </categories>
      <tags>
        <tag>入门</tag>
      </tags>
  </entry>
</search>
